{"version":3,"sources":["script/App.js","components/header.jsx","components/content/content_character.jsx","components/content/content_introduction.jsx","components/content/content_material.jsx","components/nav.jsx","components/content.jsx","components/main.jsx","script/serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","src","type","autoPlay","muted","Component","ContentCharacter","ContentIntroduction","ContentMaterial","Nav","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","navarr","map","item","index","console","log","link","key","Link","to","name","Content","Route","path","exact","component","Main","_this","urlChange","state","BrowserRouter","nav","content","h5Dom","i","length","document","App","header","main","Boolean","window","location","hostname","match","ReactDOM","render","script_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ff40bd4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Header from '../components/header.jsx';\nimport Main from '../components/main.jsx';\nlet h5Dom = ['section', 'nav'];\nfor (let i = 0; i < h5Dom.length; i++) {\n  document.createElement(h5Dom[i]);\n}\n\nclass App extends Component {\n  constructor(){\n    super();\n  }\n  render() {\n    return (\n      <div>\n        <Header />\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <section className=\"header\">\n                <video className=\"banner-video\" src=\"../src/static/ball.mp4\" type=\"video/mp4\" autoPlay muted/>\n                {/* <div className=\"go-bottom-button\">往下</div> */}\n            </section>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass ContentCharacter extends Component {\n    render() {\n        return (\n            <div className=\"content content-character\">\n                角色內容\n            </div>\n        );\n    }\n}\n\nexport default ContentCharacter;\n","import React, { Component } from 'react';\n\nclass ContentIntroduction extends Component {\n    render() {\n        return (\n            <div className=\"content content-introduction\">\n                介紹內容\n            </div>\n        );\n    }\n}\n\nexport default ContentIntroduction;\n","import React, { Component } from 'react';\n\nclass ContentMaterial extends Component {\n    render() {\n        return (\n            <div className=\"content content-material\">\n                素材內容\n            </div>\n        );\n    }\n}\n\nexport default ContentMaterial;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport ContentCharacter from './content/content_character.jsx';\nimport ContentIntroduction from './content/content_introduction.jsx';\nimport ContentMaterial from './content/content_material.jsx';\nclass Nav extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const navarr = this.props.navarr;\n        return (\n                <div className=\"nav-wrap\">\n                    {navarr.map((item, index) => {\n                        console.log(item.link);\n                        return (\n                            <div key={index}>\n                                <Link to={item.link} key={index}>{item.name}</Link>\n                            </div>\n                        )\n                    })}\n                </div>\n        );\n    }\n}\n\nexport default Nav;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport ContentCharacter from './content/content_character.jsx';\nimport ContentIntroduction from './content/content_introduction.jsx';\nimport ContentMaterial from './content/content_material.jsx';\nclass Content extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        const navarr = this.props.navarr;\n        return (\n                <div className=\"content-wrap\">\n                    {navarr.map((item, index) => {\n                        return (\n                            <div key={index}>\n                                <Route path={item.link} exact component={item.component}></Route>\n                            </div>\n                        )\n                    })}\n                </div>\n        );\n    }\n}\n\nexport default Content;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Nav from './nav.jsx';\nimport Content from './content.jsx';\nimport ContentCharacter from './content/content_character.jsx';\nimport ContentIntroduction from './content/content_introduction.jsx';\nimport ContentMaterial from './content/content_material.jsx';\nclass Main extends Component {\n    constructor() {\n        super();\n        this.state = {\n            navarr: [\n                {\n                    name: '角色',\n                    link: '/character',\n                    component: ContentCharacter\n                }, {\n                    name: '介紹',\n                    link: '/introduction',\n                    component: ContentIntroduction\n                }, {\n                    name: '素材',\n                    link: '/material',\n                    component: ContentMaterial\n                }\n            ]\n        };\n    }\n    urlChange = () => {\n        console.log('url改了');\n    }\n    render() {\n        return (\n            <Router>\n                <main>\n                    <Nav\n                        navarr={this.state.navarr}\n                        urlChange={this.urlChange}\n                    />\n                    <Content\n                        navarr={this.state.navarr}\n                        urlChange={this.urlChange}\n                    />\n                </main>\n            </Router>\n        );\n    }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './script/App';\nimport * as serviceWorker from './script/serviceWorker';\nimport './style/index.css';\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}