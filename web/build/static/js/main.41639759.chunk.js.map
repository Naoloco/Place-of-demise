{"version":3,"sources":["script/App.js","components/header.jsx","components/nav/nav_character.jsx","components/nav/nav_introduction.jsx","components/nav/nav_material.jsx","components/nav.jsx","components/content/content_character.jsx","components/content/content_introduction.jsx","components/content/content_material.jsx","components/content.jsx","components/main.jsx","script/serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","src","autoPlay","muted","Component","Nav_character","Nav_introduction","Nav_material","Nav","nav_character","nav_introduction","nav_material","ContentCharacter","ContentIntroduction","ContentMaterial","Content","content_character","content_introduction","content_material","Main","nav","content","h5Dom","i","length","document","App","header","main","Boolean","window","location","hostname","match","ReactDOM","render","script_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qHAIA,2ECSeA,mLATP,OACIC,EAAAC,EAAAC,cAAA,WAASC,UAAU,UACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eAAeC,IAAI,+DAA+DC,UAAQ,EAACC,OAAK,YAJ5GC,aCUNC,mLARP,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAf,uBAHgBI,aCUbE,mLARP,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAf,uBAHmBI,aCUhBG,mLARP,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,uBAHeI,aCcZI,mLAVP,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACY,EAAD,cANEP,aCQHQ,mLARP,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAAf,yCAHmBI,aCUhBS,mLARP,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAAf,yCAHsBI,aCUnBU,mLARP,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAAf,yCAHkBI,aCcfW,mLAVP,OACIlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAACiB,EAAD,MACAnB,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAD,cANMd,aCUPe,mLATP,OACItB,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,cALGjB,aVAfkB,EAAQ,CAAC,UAAW,OACfC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAChCE,SAAS1B,cAAcuB,EAAMC,QAchBG,mLATX,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAAC6B,EAAD,cALUxB,aWIEyB,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,iECbRC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASX,SAASY,eAAe,SD4HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC","file":"static/js/main.41639759.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Header from '../components/header.jsx';\nimport Main from '../components/main.jsx';\nlet h5Dom = ['section', 'nav'];\nfor (let i = 0; i < h5Dom.length; i++) {\n  document.createElement(h5Dom[i]);\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <section className=\"header\">\r\n                <video className=\"banner-video\" src=\"https://s23.aconvert.com/convert/p3r68-cdx67/lu24b-mfbzh.mp4\" autoPlay muted/>\r\n                {/* <div className=\"go-bottom-button\">往下</div> */}\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass Nav_character extends Component {\r\n    render() {\r\n        return (\r\n            <div className='nav nav-character'>\r\n            角色  \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav_character;\r\n","import React, { Component } from 'react';\r\n\r\nclass Nav_introduction extends Component {\r\n    render() {\r\n        return (\r\n            <div className='nav nav-introduction'>\r\n                介紹\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav_introduction;\r\n","import React, { Component } from 'react';\r\n\r\nclass Nav_material extends Component {\r\n    render() {\r\n        return (\r\n            <div className='nav nav-material'>\r\n                素材\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav_material;\r\n","import React, { Component } from 'react';\r\nimport NavCharacter from './nav/nav_character.jsx';\r\nimport NavIntroduction from './nav/nav_introduction.jsx';\r\nimport NavMaterial from './nav/nav_material.jsx';\r\nclass Nav extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"nav-wrap\">\r\n                <NavCharacter/>\r\n                <NavIntroduction/>\r\n                <NavMaterial/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from 'react';\r\n\r\nclass ContentCharacter extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"content content-character\">\r\n                角色內容區\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContentCharacter;\r\n","import React, { Component } from 'react';\r\n\r\nclass ContentIntroduction extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"content content-introduction\">\r\n                介紹內容區\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContentIntroduction;\r\n","import React, { Component } from 'react';\r\n\r\nclass ContentMaterial extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"content content-material\">\r\n                素材內容區\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContentMaterial;\r\n","import React, { Component } from 'react';\r\nimport ContentCharacter from './content/content_character.jsx';\r\nimport ContentIntroduction from './content/content_introduction.jsx';\r\nimport ContentMaterial from './content/content_material.jsx';\r\nclass Content extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"content-wrap\">\r\n                <ContentCharacter/>\r\n                <ContentIntroduction/>\r\n                <ContentMaterial/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Content;\r\n","import React, { Component } from 'react';\r\nimport Nav from './nav.jsx';\r\nimport Content from './content.jsx';\r\nclass Main extends Component {\r\n    render() {\r\n        return (\r\n            <main>\r\n                <Nav/>\r\n                <Content/>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './script/App';\nimport * as serviceWorker from './script/serviceWorker';\nimport './style/index.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}